package com.serverless.infrastructure

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.serverless.domain.ProjectInfo

@DynamoDBTable(tableName = "project-info")
class ProjectInfoPO() {

    @get:DynamoDBAutoGeneratedKey
    @get:DynamoDBHashKey(attributeName = "projectId")
    var projectId: String? = null

    @get:DynamoDBAttribute(attributeName = "repoUrl")
    var repoUrl: String? = null

    @get:DynamoDBAttribute(attributeName = "branch")
    var branch: String? = null

    @get:DynamoDBAttribute(attributeName = "userName")
    var userName: String? = null

    @get:DynamoDBAttribute(attributeName = "password")
    var password: String? = null

    constructor(projectInfo: ProjectInfo) : this() {
        val encryptor = DefaultEncryptor()
        this.branch = projectInfo.branch
        this.password = encryptor.encrypt(projectInfo.password)
        this.userName = projectInfo.userName
        this.repoUrl = projectInfo.repoUrl
    }

    fun toProjectInfo(): ProjectInfo {
        return ProjectInfo(projectId, repoUrl, branch, userName, password)
    }

    override fun toString(): String {
        return "ProjectInfoPO(projectId=$projectId, repoUrl=$repoUrl, branch=$branch, userName=$userName, password=$password)"
    }


}