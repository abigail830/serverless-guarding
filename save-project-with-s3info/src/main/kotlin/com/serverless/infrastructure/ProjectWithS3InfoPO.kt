package com.serverless.infrastructure

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedJson
import com.serverless.model.ProjectWithS3
import com.serverless.model.S3Info


@DynamoDBTable(tableName = "project-info-with-s3")
class ProjectWithS3InfoPO() {

    @get:DynamoDBAutoGeneratedKey
    @get:DynamoDBHashKey
    var projectId: String? = null

    @get:DynamoDBAttribute
    @set:DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var createdTime: Long? = null

    @get:DynamoDBAttribute
    @set:DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.ALWAYS)
    var updateTime: Long? = null

    @get:DynamoDBAttribute
    var repoUrl: String? = null

    @get:DynamoDBAttribute
    var branch: String? = null

    @get:DynamoDBAttribute
    var userName: String? = null

    @get:DynamoDBAttribute
    var password: String? = null

    @get:DynamoDBAttribute
    @DynamoDBTypeConvertedJson
    var s3InfoPO: S3InfoPO? = null

    constructor(projectWithS3: ProjectWithS3) : this() {
        val encryptor = DefaultEncryptor()
        this.branch = projectWithS3.branch
        this.password = encryptor.encrypt(projectWithS3.password)
        this.userName = projectWithS3.userName
        this.repoUrl = projectWithS3.repoUrl
        this.s3InfoPO = S3InfoPO(projectWithS3.s3Info)
    }

    fun toProjectWithS3(): ProjectWithS3 {
        return ProjectWithS3(repoUrl!!
                , userName ?: ""
                , password ?: ""
                , branch ?: "master"
                , s3InfoPO?.toS3Info() ?: S3Info("", "", "")
        )
    }
}

class S3InfoPO() {

    @get:DynamoDBAttribute
    var bucketName: String? = null

    @get:DynamoDBAttribute
    var projectName: String? = null

    @get:DynamoDBAttribute
    var s3Folder: String? = null

    constructor(s3Info: S3Info) : this() {
        this.bucketName = s3Info.bucketName
        this.projectName = s3Info.projectName
        this.s3Folder = s3Info.s3Folder
    }

    fun toS3Info(): S3Info? {
        return S3Info(bucketName ?: "",
                projectName ?: "",
                s3Folder ?: "")
    }
}